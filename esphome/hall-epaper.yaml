esphome:
  name: hall-epaper
  
external_components:
  - source: "github://pr#3255"
    components:
      - display
      - online_image

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

ota:
  password: <<SNIP>>

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  manual_ip:
    static_ip: 192.168.1.66
    gateway: 192.168.1.1
    subnet: 255.255.255.0

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Hall-Epaper Fallback Hotspot"
    password: !secret fallback_password

captive_portal:

mqtt:
  broker: homeassistant.local
  username: !secret mqtt_user
  password: !secret mqtt_pass

# online_image:
#   - url: "https://upload.wikimedia.org/wikipedia/commons/4/47/PNG_transparency_demonstration_1.png"
#     id: png_image

globals:
  - id: font_event_entry_size
    type: int
    initial_value: '36'
  - id: font_event_time_size
    type: int
    initial_value: '20'
  - id: header_size
    type: int
    initial_value: '72'
  - id: row_height
    type: int
    initial_value: '60'

font:
  - file: "gfonts://Noto Sans"
    id: font_event_entry
    size: 27 # 36px
    glyphs:
      ['&', '@', '!', ',', '.', '"', '%', '(', ')', '+', '-', '_', ':', '°', '0',
       '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E',
       'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
       'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', 'a', 'b', 'c', 'd', 'e', 'f',
       'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',
       'u', 'v', 'w', 'x', 'y', 'z', 'å', 'ä', 'ö', '/']
  - file: "gfonts://Noto Sans"
    id: font_title
    size: 45 # 60
  - file: "gfonts://Noto Sans Mono@bold"
    id: font_event_time
    size: 15 # 20px
  # Thanks to https://community.home-assistant.io/t/display-materialdesign-icons-on-esphome-attached-to-screen/199790/16
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_mdi_large
    size: 40
    glyphs: &mdi-weather-glyphs
      - "\U000F0590" # mdi-weather-cloudy
      - "\U000F0F2F" # mdi-weather-cloudy-alert
      - "\U000F0E6E" # mdi-weather-cloudy-arrow-right
      - "\U000F0591" # mdi-weather-fog
      - "\U000F0592" # mdi-weather-hail
      - "\U000F0F30" # mdi-weather-hazy
      - "\U000F0898" # mdi-weather-hurricane
      - "\U000F0593" # mdi-weather-lightning
      - "\U000F067E" # mdi-weather-lightning-rainy
      - "\U000F0594" # mdi-weather-night
      - "\U000F0F31" # mdi-weather-night-partly-cloudy
      - "\U000F0595" # mdi-weather-partly-cloudy
      - "\U000F0F32" # mdi-weather-partly-lightning
      - "\U000F0F33" # mdi-weather-partly-rainy
      - "\U000F0F34" # mdi-weather-partly-snowy
      - "\U000F0F35" # mdi-weather-partly-snowy-rainy
      - "\U000F0596" # mdi-weather-pouring
      - "\U000F0597" # mdi-weather-rainy
      - "\U000F0598" # mdi-weather-snowy
      - "\U000F0F36" # mdi-weather-snowy-heavy
      - "\U000F067F" # mdi-weather-snowy-rainy
      - "\U000F0599" # mdi-weather-sunny
      - "\U000F0F37" # mdi-weather-sunny-alert
      - "\U000F14E4" # mdi-weather-sunny-off
      - "\U000F059A" # mdi-weather-sunset
      - "\U000F059B" # mdi-weather-sunset-down
      - "\U000F059C" # mdi-weather-sunset-up
      - "\U000F0F38" # mdi-weather-tornado
      - "\U000F059D" # mdi-weather-windy
      - "\U000F059E" # mdi-weather-windy-variant
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_mdi_medium
    size: 36
    glyphs: *mdi-weather-glyphs
    
text_sensor:
  - platform: homeassistant
    entity_id: weather.dark_sky
    id: weather_state
    # on_value:
    #   then:
    #     - component.update: paper_screen

  - platform: mqtt_subscribe
    id: display_left
    internal: false
    name: "Display Left"
    entity_category: "diagnostic"
    topic: /calendar/today/date

  - platform: mqtt_subscribe
    id: display_right
    internal: false
    name: "Display Right"
    entity_category: "diagnostic"
    topic: /calendar/tomorrow/date

  - platform: template
    id: last_update
    internal: false
    name: "Last Update"
    entity_category: "diagnostic"

  - platform: mqtt_subscribe
    id: today_1_start
    internal: true
    topic: /calendar/today/0/eventStart

  - platform: mqtt_subscribe
    id: today_1_end
    internal: true
    topic: /calendar/today/0/eventEnd

  - platform: mqtt_subscribe
    id: today_1_title
    internal: true
    topic: /calendar/today/0/summary

  - platform: mqtt_subscribe
    id: today_2_start
    internal: true
    topic: /calendar/today/1/eventStart

  - platform: mqtt_subscribe
    id: today_2_end
    internal: true
    topic: /calendar/today/1/eventEnd

  - platform: mqtt_subscribe
    id: today_2_title
    internal: true
    topic: /calendar/today/1/summary

  - platform: mqtt_subscribe
    id: today_3_start
    internal: true
    topic: /calendar/today/2/eventStart

  - platform: mqtt_subscribe
    id: today_3_end
    internal: true
    topic: /calendar/today/2/eventEnd

  - platform: mqtt_subscribe
    id: today_3_title
    internal: true
    topic: /calendar/today/2/summary

  - platform: mqtt_subscribe
    id: today_4_start
    internal: true
    topic: /calendar/today/3/eventStart

  - platform: mqtt_subscribe
    id: today_4_end
    internal: true
    topic: /calendar/today/3/eventEnd

  - platform: mqtt_subscribe
    id: today_4_title
    internal: true
    topic: /calendar/today/3/summary

  - platform: mqtt_subscribe
    id: today_5_start
    internal: true
    topic: /calendar/today/4/eventStart

  - platform: mqtt_subscribe
    id: today_5_end
    internal: true
    topic: /calendar/today/4/eventEnd

  - platform: mqtt_subscribe
    id: today_5_title
    internal: true
    topic: /calendar/today/4/summary

  - platform: mqtt_subscribe
    id: today_6_start
    internal: true
    topic: /calendar/today/5/eventStart

  - platform: mqtt_subscribe
    id: today_6_end
    internal: true
    topic: /calendar/today/5/eventEnd

  - platform: mqtt_subscribe
    id: today_6_title
    internal: true
    topic: /calendar/today/5/summary

  - platform: mqtt_subscribe
    id: tomorrow_1_start
    internal: true
    topic: /calendar/tomorrow/0/eventStart

  - platform: mqtt_subscribe
    id: tomorrow_1_end
    internal: true
    topic: /calendar/tomorrow/0/eventEnd

  - platform: mqtt_subscribe
    id: tomorrow_1_title
    internal: true
    topic: /calendar/tomorrow/0/summary

  - platform: mqtt_subscribe
    id: tomorrow_2_start
    internal: true
    topic: /calendar/tomorrow/1/eventStart

  - platform: mqtt_subscribe
    id: tomorrow_2_end
    internal: true
    topic: /calendar/tomorrow/1/eventEnd

  - platform: mqtt_subscribe
    id: tomorrow_2_title
    internal: true
    topic: /calendar/tomorrow/1/summary

  - platform: mqtt_subscribe
    id: tomorrow_3_start
    internal: true
    topic: /calendar/tomorrow/2/eventStart

  - platform: mqtt_subscribe
    id: tomorrow_3_end
    internal: true
    topic: /calendar/tomorrow/2/eventEnd

  - platform: mqtt_subscribe
    id: tomorrow_3_title
    internal: true
    topic: /calendar/tomorrow/2/summary

  - platform: mqtt_subscribe
    id: tomorrow_4_start
    internal: true
    topic: /calendar/tomorrow/3/eventStart

  - platform: mqtt_subscribe
    id: tomorrow_4_end
    internal: true
    topic: /calendar/tomorrow/3/eventEnd

  - platform: mqtt_subscribe
    id: tomorrow_4_title
    internal: true
    topic: /calendar/tomorrow/3/summary

  - platform: mqtt_subscribe
    id: tomorrow_5_start
    internal: true
    topic: /calendar/tomorrow/4/eventStart

  - platform: mqtt_subscribe
    id: tomorrow_5_end
    internal: true
    topic: /calendar/tomorrow/4/eventEnd

  - platform: mqtt_subscribe
    id: tomorrow_5_title
    internal: true
    topic: /calendar/tomorrow/4/summary

  - platform: mqtt_subscribe
    id: tomorrow_6_start
    internal: true
    topic: /calendar/tomorrow/5/eventStart

  - platform: mqtt_subscribe
    id: tomorrow_6_end
    internal: true
    topic: /calendar/tomorrow/5/eventEnd

  - platform: mqtt_subscribe
    id: tomorrow_6_title
    internal: true
    topic: /calendar/tomorrow/5/summary

sensor:
  - platform: homeassistant
    entity_id: weather.mclaren_road
    attribute: temperature
    id: weather_temp
    # on_value:
    #   then:
    #     - component.update: paper_screen

button:
  - platform: template
    name: Reload Display
    id: button_reload

    # Optional variables:
    icon: "mdi:sync"
    on_press:
      then:
        - logger.log: "Button pressed"
        - component.update: paper_screen

time:
  - platform: homeassistant
    id: homeassistant_time

spi:
  clk_pin: GPIO13
  mosi_pin: GPIO14
  
display:
  - platform: waveshare_epaper
    update_interval: 12h
    reset_duration: 2ms
    id: paper_screen
    cs_pin: GPIO15
    dc_pin: GPIO27
    busy_pin: GPIO25
    reset_pin: GPIO26
    model: 7.50inV2
    rotation: 0°
    lambda: |-
      // Map weather states to MDI characters.

      char str[17];
      time_t currTime = id(homeassistant_time).now().timestamp;
      strftime(str, sizeof(str), "%Y-%m-%d %H:%M", localtime(&currTime));
      id(last_update).publish_state(str);

      std::map<std::string, std::string> weather_icon_map
        {
          {"cloudy", "\U000F0590"},
          {"cloudy-alert", "\U000F0F2F"},
          {"cloudy-arrow-right", "\U000F0E6E"},
          {"fog", "\U000F0591"},
          {"hail", "\U000F0592"},
          {"hazy", "\U000F0F30"},
          {"hurricane", "\U000F0898"},
          {"lightning", "\U000F0593"},
          {"lightning-rainy", "\U000F067E"},
          {"night", "\U000F0594"},
          {"night-partly-cloudy", "\U000F0F31"},
          {"partlycloudy", "\U000F0595"},
          {"partly-lightning", "\U000F0F32"},
          {"partly-rainy", "\U000F0F33"},
          {"partly-snowy", "\U000F0F34"},
          {"partly-snowy-rainy", "\U000F0F35"},
          {"pouring", "\U000F0596"},
          {"rainy", "\U000F0597"},
          {"snowy", "\U000F0598"},
          {"snowy-heavy", "\U000F0F36"},
          {"snowy-rainy", "\U000F067F"},
          {"sunny", "\U000F0599"},
          {"sunny-alert", "\U000F0F37"},
          {"sunny-off", "\U000F14E4"},
          {"sunset", "\U000F059A"},
          {"sunset-down", "\U000F059B"},
          {"sunset-up", "\U000F059C"},
          {"tornado", "\U000F0F38"},
          {"windy", "\U000F059D"},
          {"windy-variant", "\U000F059E"},
        };
      
      it.printf(10, 10, id(font_title), TextAlign::TOP_LEFT, "%s", id(display_left).state.c_str());
      it.printf(790, 10, id(font_title), TextAlign::TOP_RIGHT, "%s", id(display_right).state.c_str());
      it.printf(400, 10, id(font_mdi_large), TextAlign::TOP_CENTER, "%s", weather_icon_map[id(weather_state).state.c_str()].c_str());
      it.printf(400, 50, id(font_event_time), TextAlign::TOP_CENTER, "%2.0f°C", id(weather_temp).state);
      it.line(400, 80, 400, 448);



      it.printf(10, id(header_size) + id(row_height)*1 - id(row_height)/2, id(font_event_time),  TextAlign::BOTTOM_LEFT, "%s", id(today_1_start).state.c_str());
      it.printf(58, id(header_size) + id(row_height)*1 - id(row_height)/2, id(font_event_time),  TextAlign::TOP_RIGHT,   "%s", id(today_1_end).state.c_str());
      it.printf(66, id(header_size) + id(row_height)*1 - id(row_height)/2, id(font_event_entry), TextAlign::CENTER_LEFT, "%s", id(today_1_title).state.c_str());

      it.printf(10, id(header_size) + id(row_height)*2 - id(row_height)/2, id(font_event_time),  TextAlign::BOTTOM_LEFT, "%s", id(today_2_start).state.c_str());
      it.printf(58, id(header_size) + id(row_height)*2 - id(row_height)/2, id(font_event_time),  TextAlign::TOP_RIGHT,   "%s", id(today_2_end).state.c_str());
      it.printf(66, id(header_size) + id(row_height)*2 - id(row_height)/2, id(font_event_entry), TextAlign::CENTER_LEFT, "%s", id(today_2_title).state.c_str());

      it.printf(10, id(header_size) + id(row_height)*3 - id(row_height)/2, id(font_event_time),  TextAlign::BOTTOM_LEFT, "%s", id(today_3_start).state.c_str());
      it.printf(58, id(header_size) + id(row_height)*3 - id(row_height)/2, id(font_event_time),  TextAlign::TOP_RIGHT,   "%s", id(today_3_end).state.c_str());
      it.printf(66, id(header_size) + id(row_height)*3 - id(row_height)/2, id(font_event_entry), TextAlign::CENTER_LEFT, "%s", id(today_3_title).state.c_str());

      it.printf(10, id(header_size) + id(row_height)*4 - id(row_height)/2, id(font_event_time),  TextAlign::BOTTOM_LEFT, "%s", id(today_4_start).state.c_str());
      it.printf(58, id(header_size) + id(row_height)*4 - id(row_height)/2, id(font_event_time),  TextAlign::TOP_RIGHT,   "%s", id(today_4_end).state.c_str());
      it.printf(66, id(header_size) + id(row_height)*4 - id(row_height)/2, id(font_event_entry), TextAlign::CENTER_LEFT, "%s", id(today_4_title).state.c_str());

      it.printf(10, id(header_size) + id(row_height)*5 - id(row_height)/2, id(font_event_time),  TextAlign::BOTTOM_LEFT, "%s", id(today_5_start).state.c_str());
      it.printf(58, id(header_size) + id(row_height)*5 - id(row_height)/2, id(font_event_time),  TextAlign::TOP_RIGHT,   "%s", id(today_5_end).state.c_str());
      it.printf(66, id(header_size) + id(row_height)*5 - id(row_height)/2, id(font_event_entry), TextAlign::CENTER_LEFT, "%s", id(today_5_title).state.c_str());

      it.printf(10, id(header_size) + id(row_height)*6 - id(row_height)/2, id(font_event_time),  TextAlign::BOTTOM_LEFT, "%s", id(today_6_start).state.c_str());
      it.printf(58, id(header_size) + id(row_height)*6 - id(row_height)/2, id(font_event_time),  TextAlign::TOP_RIGHT,   "%s", id(today_6_end).state.c_str());
      it.printf(66, id(header_size) + id(row_height)*6 - id(row_height)/2, id(font_event_entry), TextAlign::CENTER_LEFT, "%s", id(today_6_title).state.c_str());



      it.printf(400 + 10, id(header_size) + id(row_height)*1 - id(row_height)/2, id(font_event_time),  TextAlign::BOTTOM_LEFT, "%s", id(tomorrow_1_start).state.c_str());
      it.printf(400 + 58, id(header_size) + id(row_height)*1 - id(row_height)/2, id(font_event_time),  TextAlign::TOP_RIGHT,   "%s", id(tomorrow_1_end).state.c_str());
      it.printf(400 + 66, id(header_size) + id(row_height)*1 - id(row_height)/2, id(font_event_entry), TextAlign::CENTER_LEFT, "%s", id(tomorrow_1_title).state.c_str());

      it.printf(400 + 10, id(header_size) + id(row_height)*2 - id(row_height)/2, id(font_event_time),  TextAlign::BOTTOM_LEFT, "%s", id(tomorrow_2_start).state.c_str());
      it.printf(400 + 58, id(header_size) + id(row_height)*2 - id(row_height)/2, id(font_event_time),  TextAlign::TOP_RIGHT,   "%s", id(tomorrow_2_end).state.c_str());
      it.printf(400 + 66, id(header_size) + id(row_height)*2 - id(row_height)/2, id(font_event_entry), TextAlign::CENTER_LEFT, "%s", id(tomorrow_2_title).state.c_str());

      it.printf(400 + 10, id(header_size) + id(row_height)*3 - id(row_height)/2, id(font_event_time),  TextAlign::BOTTOM_LEFT, "%s", id(tomorrow_3_start).state.c_str());
      it.printf(400 + 58, id(header_size) + id(row_height)*3 - id(row_height)/2, id(font_event_time),  TextAlign::TOP_RIGHT,   "%s", id(tomorrow_3_end).state.c_str());
      it.printf(400 + 66, id(header_size) + id(row_height)*3 - id(row_height)/2, id(font_event_entry), TextAlign::CENTER_LEFT, "%s", id(tomorrow_3_title).state.c_str());

      it.printf(400 + 10, id(header_size) + id(row_height)*4 - id(row_height)/2, id(font_event_time),  TextAlign::BOTTOM_LEFT, "%s", id(tomorrow_4_start).state.c_str());
      it.printf(400 + 58, id(header_size) + id(row_height)*4 - id(row_height)/2, id(font_event_time),  TextAlign::TOP_RIGHT,   "%s", id(tomorrow_4_end).state.c_str());
      it.printf(400 + 66, id(header_size) + id(row_height)*4 - id(row_height)/2, id(font_event_entry), TextAlign::CENTER_LEFT, "%s", id(tomorrow_4_title).state.c_str());

      it.printf(400 + 10, id(header_size) + id(row_height)*5 - id(row_height)/2, id(font_event_time),  TextAlign::BOTTOM_LEFT, "%s", id(tomorrow_5_start).state.c_str());
      it.printf(400 + 58, id(header_size) + id(row_height)*5 - id(row_height)/2, id(font_event_time),  TextAlign::TOP_RIGHT,   "%s", id(tomorrow_5_end).state.c_str());
      it.printf(400 + 66, id(header_size) + id(row_height)*5 - id(row_height)/2, id(font_event_entry), TextAlign::CENTER_LEFT, "%s", id(tomorrow_5_title).state.c_str());

      it.printf(400 + 10, id(header_size) + id(row_height)*6 - id(row_height)/2, id(font_event_time),  TextAlign::BOTTOM_LEFT, "%s", id(tomorrow_6_start).state.c_str());
      it.printf(400 + 58, id(header_size) + id(row_height)*6 - id(row_height)/2, id(font_event_time),  TextAlign::TOP_RIGHT,   "%s", id(tomorrow_6_end).state.c_str());
      it.printf(400 + 66, id(header_size) + id(row_height)*6 - id(row_height)/2, id(font_event_entry), TextAlign::CENTER_LEFT, "%s", id(tomorrow_6_title).state.c_str());

      it.printf(790,      470,                                                   id(font_event_time),  TextAlign::BOTTOM_RIGHT,"%s", id(last_update).state.c_str());